generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  username    String    @unique(map: "username_UNIQUE") @db.VarChar(50)
  email       String    @unique(map: "email_UNIQUE") @db.VarChar(70)
  mobile      String?   @default("NA") @db.VarChar(45)
  password    String?   @db.VarChar(256)
  role        String?   @default("User") @db.VarChar(45)
  vendor      String?   @default("NA") @db.VarChar(45)
  profile_img String?   @default("NA") @db.VarChar(256)
  location    String?   @db.Text
  bio         String?   @db.LongText
  company     String?   @default("NA") @db.VarChar(256)
  website     String?   @default("NA") @db.VarChar(256)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  updated_at  DateTime? @default(now()) @db.DateTime(0)
}

model users_token {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique(map: "user_id_UNIQUE")
  token      String    @db.VarChar(256)
  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
}

model users_social_details {
  id        Int     @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id   Int     @unique(map: "user_id_UNIQUE")
  facebook  String? @default("NA") @db.VarChar(256)
  instagram String? @default("NA") @db.VarChar(256)
  github    String? @default("NA") @db.VarChar(256)
  twitter   String? @default("NA") @db.VarChar(256)
  linkedin  String? @default("NA") @db.VarChar(256)
  telegram  String? @default("NA") @db.VarChar(256)
}

model vendors {
  id            Int       @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id       Int       @unique(map: "user_id_UNIQUE")
  vendor_name   String?   @db.VarChar(45)
  app_key       String?   @db.VarChar(256)
  secret_key    String?   @db.VarChar(256)
  session_key   String?   @db.VarChar(45)
  session_token String?   @db.VarChar(256)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @default(now()) @db.DateTime(0)
}

model bots {
  id         Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id    Int       @unique(map: "user_id_UNIQUE")
  name       String    @db.VarChar(45)
  bot_img    String?   @db.VarChar(45)
  password   String?   @default("NA") @db.VarChar(256)
  status     String?   @default("Inactive") @db.VarChar(45)
  price      Int?      @default(0)
  returns    Int?      @default(0)
  risk       Int?      @default(0)
  renew_date DateTime? @db.DateTime(0)
  intro      String?   @db.LongText
}

model bot_result {
  id                Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  bot_id            Int       @unique(map: "bot_id_UNIQUE")
  execution_time    DateTime? @db.DateTime(0)
  symbols_processed Int?
  current_holdings  Int?
  current_orders    Int?
  buy_orders        Int?
  sell_orders       Int?
  total_buy_value   Float?    @db.Float
  total_sell_value  Float?    @db.Float
  net_flow          Float?    @db.Float
  is_live           Int?      @db.TinyInt
  capital_per_stock Int?
  status            String?   @db.VarChar(45)
}

model bot_config {
  id              Int               @unique(map: "id_UNIQUE") @default(autoincrement())
  bot_id          Int               @unique(map: "BotConfig_userId_key")
  user            String            @db.VarChar(45)
  sessionToken    String?
  capitalPerStock Float
  isLive          Boolean
  interval        String
  entry_condition entry_condition[]
  exit_condition  exit_condition[]
  symbols         symbols[]
}

model entry_condition {
  id          Int         @unique(map: "id_UNIQUE") @default(autoincrement())
  left        String
  operator    String
  right       String
  type        String
  botConfigId Int?
  bot_config  bot_config? @relation(fields: [botConfigId], references: [id], map: "EntryCondition_botConfigId_fkey")

  @@index([botConfigId], map: "EntryCondition_botConfigId_fkey")
}

model exit_condition {
  id          Int         @unique(map: "id_UNIQUE") @default(autoincrement())
  left        String
  operator    String
  right       String
  type        String
  botConfigId Int?
  bot_config  bot_config? @relation(fields: [botConfigId], references: [id], map: "ExitCondition_botConfigId_fkey")

  @@index([botConfigId], map: "ExitCondition_botConfigId_fkey")
}

model symbols {
  id          Int         @unique(map: "id_UNIQUE") @default(autoincrement())
  name        String
  botConfigId Int?
  bot_config  bot_config? @relation(fields: [botConfigId], references: [id], map: "Symbol_botConfigId_fkey")

  @@index([botConfigId], map: "Symbol_botConfigId_fkey")
}
